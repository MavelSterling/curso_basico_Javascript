// Existen m√©todos de arrays para recorrerlos, y devolver un valor o un array con nuevos resultados. 
// Entre estos est√°n dos muy importantes: map y filter.

// el siguiente array de objetos para los ejemplos de los m√©todos:

var articulos = [
    { nombre: "Bici", costo: 3000 },
    { nombre: "TV", costo: 2500 },
    { nombre: "Libro", costo: 320 },
    { nombre: "Celular", costo: 10000 },
    { nombre: "Laptop", costo: 20000 },
    { nombre: "Teclado", costo: 500 },
    { nombre: "Audifonos", costo: 1700 },
  ]

console.log(articulos)
console.log("--------------------------------")
console.log("--------------------------------")

//----------------------------------------------------------------
// El m√©todo filter

/* El m√©todo filter consiste en crear un nuevo array a partir de los elementos originales 
filtrados mediante una funci√≥n (callback) que indica la condici√≥n a cumplir y es inmutable. 
Si la condici√≥n se cumple, retorna el elemento completo.*/

/*
El m√©todo filter recibe dos argumentos:

-> La funci√≥n que itera y eval√∫a si cada elemento del array 
   si cumple con la condici√≥n especificada (obligatorio).

-> Un objeto al que puede hacer referencia el contexto this en la funci√≥n. 
   Si se lo omite, ser√° undefined. Recuerde que this es diferente seg√∫n el lugar donde sea invocado.
*/

// var otherArray = array.filter(function(), thisArg)

/* 
La funci√≥n, que recibe como argumento el m√©todo filter, utiliza tres par√°metros:

-> El valor actual del elemento iterado. 
   Es decir, si es la primera iteraci√≥n, ser√° el primer elemento, y as√≠ sucesivamente.

-> El √≠ndice del elemento iterado.
   Es decir, si es la primera iteraci√≥n, ser√° el √≠ndice 0, y as√≠ sucesivamente.

-> El array que est√° iterando.

const other = array.filter(function(element, index, array))

*/

/* V√°lida si es un true o false para poder meterlos al nuevo array, 
y √©ste m√©todo no modifica el array original */

var articulosFiltrados = articulos.filter(function(articulo){
    return articulo.costo <= 500  /* Menor o igual a 100 */ 
});

console.log(articulosFiltrados);
  /* [
    { nombre: 'Libro', costo: 320 },{ nombre: 'Teclado', costo: 500 }
  ] */
  console.log("--------------------------------")
  console.log("--------------------------------")

//----------------------------------------------------------------
 
 // El m√©todo map

 // El m√©todo map es inmutable y consiste en crear un nuevo array a partir 
 // de los elementos originales transformados mediante una funci√≥n (callback).


 /*
El m√©todo map recibe dos argumentos:

-> La funci√≥n que itera y transforma cada elemento del array (obligatorio).

-> Un objeto al que puede hacer referencia el contexto this en la funci√≥n. 
   Si se lo omite, ser√° undefined. Recuerde que this es diferente seg√∫n el lugar donde sea invocado.

   var otherArray = array.map(function(), thisArg)

 */

/*
La funci√≥n, que recibe como argumento el m√©todo map, utiliza tres par√°metros opcionales:

-> El valor actual del elemento iterado. 
   Es decir, si es la primera iteraci√≥n, ser√° el primer elemento, y as√≠ sucesivamente.

-> El √≠ndice del elemento iterado. 
   Es decir, si es la primera iteraci√≥n, ser√° el √≠ndice 0, y as√≠ sucesivamente.

-> El array que est√° iterando.

   var otherArray = array.map(function(element, index, array))
*/

var nombreArticulos = articulos.map(function (articulo) {
  return articulo.nombre
})
console.log(nombreArticulos)

/* Retorna: 
[ 'Bici', 'TV', 'Libro', 'Celular', 'Laptop', 'Teclado', 'Audifonos' ]
*/
console.log("--------------------------------")
console.log("--------------------------------")

//----------------------------------------------------------------
//   Metodo Find

 /* El m√©todo find consiste en encontrar el primer elemento de un array 
   que cumpla con la condici√≥n especificada en la funci√≥n (callback). 
   Si ning√∫n elemento cumpla con la condici√≥n, retornar√° undefined.

El m√©todo find recibe dos argumentos:

-> La funci√≥n que itera y eval√∫a cada elemento del array hasta 
   encuentre uno que cumpla con la condici√≥n especificada (obligatorio).

-> Un objeto al que puede hacer referencia el contexto this en la funci√≥n.
   Si se lo omite, ser√° undefined.


   array.find(function(), thisArg)

La funci√≥n, que recibe como argumento, utiliza tres par√°metros opcionales:

 -> El valor actual del elemento iterado. 
    Es decir, si es la primera iteraci√≥n, ser√° el primer elemento, y as√≠ sucesivamente.

 -> El √≠ndice del elemento iterado. 
    Es decir, si es la primera iteraci√≥n, ser√° el √≠ndice 0, y as√≠ sucesivamente.

 -> El array que est√° iterando.

*/

 var encuentraArticulos = articulos.find(function(articulo){
    return articulo.nombre === 'laptop';
});

console.log(encuentraArticulos);
/* Retorna:
{ nombre: 'Laptop', costo: 3000 }
*/
console.log("--------------------------------")
console.log("--------------------------------")


//----------------------------------------------------------------
//   Metodo forEach

/*
El m√©todo forEach de los arrays consiste en ejecutar una funci√≥n (callback) 
para cada uno de los elementos iterados. Iterar significa repetir una acci√≥n varias veces. 
Este m√©todo no retorna ning√∫n valor.

Este m√©todo recibe dos argumentos:

-> La funci√≥n que itera cada elemento del array (obligatorio).
-> Un objeto al que puede hacer referencia el contexto this en la funci√≥n.
   Si se lo omite, ser√° undefined.

  array.forEach(function(), thisArg)

La funci√≥n, que recibe como argumento el m√©todo forEach, utiliza tres par√°metros opcionales:

-> El valor actual del elemento iterado.
   Es decir, si es la primera iteraci√≥n, ser√° el primer elemento, y as√≠ sucesivamente.

-> El √≠ndice del elemento iterado. 
   Es decir, si es la primera iteraci√≥n, ser√° el √≠ndice 0, y as√≠ sucesivamente.

-> El array que est√° iterando.

array.forEach(function(element, index, array))
*/

articulos.forEach(function(articulo){
    console.log(articulo.nombre);
});
console.log("--------------------------------")
console.log("--------------------------------")


//----------------------------------------------------------------
//   Metodo Some
/* Este m√©todo nos regresa un false o un true para validar si hay o no art√≠culos que cumplan la validaci√≥n */

/*
El m√©todo somees inmutable y consiste retornar un valor l√≥gico verdadero 
si existe al menos un elemento que cumpla la condici√≥n establecida en la funci√≥n (callback).

El m√©todo some recibe dos argumentos:

-> La funci√≥n que itera y eval√∫a cada elemento del array 
   hasta que al menos uno cumpla con la condici√≥n especificada (obligatorio).

-> Un objeto al que puede hacer referencia el contexto this en la funci√≥n. 
   Si se lo omite, ser√° undefined.

   array.some(function(), thisArg)

La funci√≥n, que recibe como argumento el m√©todo some, utiliza tres par√°metros:

-> El valor actual del elemento iterado. 
   Es decir, si es la primera iteraci√≥n, ser√° el primer elemento, y as√≠ sucesivamente.

-> El √≠ndice del elemento iterado. 
   Es decir, si es la primera iteraci√≥n, ser√° el √≠ndice 0, y as√≠ sucesivamente.

-> El array que est√° iterando.

   array.some(function(element, index, array))
*/

var articulosBaratos = articulos.some(function(articulo){
    return articulo.costo <= 700;
});

console.log(articulosBaratos); 
console.log("--------------------------------")
console.log("--------------------------------")

//----------------------------------------------------------------
// Metodo Every

/* Este m√©todo checa que todos los elementos en el array cumplan con la validaci√≥n que ponemos, y al final nos regresa un true o un false */

var articulosBaratos = articulos.every(function(articulo){
    return articulo.costo <= 700;
});

console.log(articulosBaratos);
console.log("--------------------------------")
console.log("--------------------------------")



//----------------------------------------------------------------
//  Metodo Reduce
/* Este m√©todo corre una funci√≥n en cada elemento del array, para comenzar a sumar los costos de cada elemento. */

var costoTotal = articulos.reduce(function(totalActual, articulo){
    return articulo.costo + totalActual;
}, 0); // El 0 ser√° la cantidad inicial con la que comenzar√° el totalActual

console.log(costoTotal); 

//----------------------------------------------------------------
// Metodo Includes

var numeros = [1, 2, 3, 4, 5, 6];

var incluyeNumero = numeros.includes(2); 

console.log(incluyeNumero);
console.log("--------------------------------")
console.log("--------------------------------")

//----------------------------------------------------------------
//----------------------------------------------------------------
// EJEMPLO:
var articulos = [
	{ nombre: 'üì±', precio: 1000 },
	{ nombre: 'üíª', precio: 1500 },
	{ nombre: 'üñ•', precio: 2000 },
	{ nombre: '‚å®Ô∏è', precio: 100 },
	{ nombre: 'üñ±', precio: 70 },
	{ nombre: 'üöó', precio: 30000 },
];

// M√©todo Filter
var articulosFiltrados = articulos.filter(function(articulo) {
	return articulo.precio <= 500;
});

// M√©todo Map
var nombreArticulos = articulos.map(function(articulo) {
	return articulo.nombre;
});

console.log(articulosFiltrados);
// (2) [{‚Ä¶}, {‚Ä¶}]
//   0: {nombre: "‚å®Ô∏è", precio: 100}
//   1: {nombre: "üñ±", precio: 70}
console.log("--------------------------------")
console.log("--------------------------------")


console.log(nombreArticulos); // Retorna (5) ["üì±", "üíª", "üñ•", "‚å®Ô∏è", "üöó"]
console.log("--------------------------------")
console.log("--------------------------------")
